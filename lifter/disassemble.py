from binaryninja import InstructionTextToken, InstructionTextTokenType
from .instructions.mov import *
from .instructions.incdec import *
from .instructions.addsub import *
from .instructions.bitwise import *
from .instructions.branches import *
from .instructions.loadstore import *
from .instructions.stack import *
from .instructions.other import *

optdict = {
    0x00 : NOP,
    0x01 : LoadRegImm,
    0x02 : StoreMemA,
    0x03 : IncReg16,
    0x04 : IncReg,
    0x05 : DecReg,
    0x06 : MovRegImm,
    0x07 : RotateAccumulatorLeftWithCarry,
    0x09 : AddHLReg,
    0x0a : LoadAccumulatorRegMem,
    0x0b : DecReg16,
    0x0c : IncReg,
    0x0d : DecReg,
    0x0e : MovRegImm,
    0x0f : RotateAccumulatorRightWithCarry,
    0x11 : LoadRegImm,
    0x12 : StoreMemA,
    0x13 : IncReg16,
    0x14 : IncReg,
    0x15 : DecReg,
    0x16 : MovRegImm,
    0x17 : RotateAccumulatorLeft,
    0x19 : AddHLReg,
    0x1a : LoadAccumulatorRegMem,
    0x1b : DecReg16,
    0x1c : IncReg,
    0x1d : DecReg,
    0x1e : MovRegImm,
    0x1f : RotateAccumulatorRight,
    0x21 : LoadRegImm,
    0x22 : StoreMemReg,
    0x23 : IncReg16,
    0x24 : IncReg,
    0x25 : DecReg,
    0x26 : MovRegImm,
    0x27 : DAA,
    0x29 : AddHLReg,
    0x2a : LoadMemReg,
    0x2b : DecReg16,
    0x2c : IncReg,
    0x2d : DecReg,
    0x2e : MovRegImm,
    0x2f : NotAccumulator,
    0x31 : LoadRegImm,
    0x32 : StoreAddrA,
    0x33 : IncReg16,
    0x34 : IncMem,
    0x35 : DecMem,
    0x36 : MovRegImm,
    0x37 : SetCarry,
    0x39 : AddHLReg,
    0x3a : LoadAccumulatorMem,
    0x3b : DecReg16,
    0x3c : IncReg,
    0x3d : DecReg,
    0x3e : MovRegImm,
    0x3f : NotCarry,
    0x40 : MovRegReg,
    0x41 : MovRegReg,
    0x42 : MovRegReg,
    0x43 : MovRegReg,
    0x44 : MovRegReg,
    0x45 : MovRegReg,
    0x46 : MovRegMem,
    0x47 : MovRegReg,
    0x48 : MovRegReg,
    0x49 : MovRegReg,
    0x4a : MovRegReg,
    0x4b : MovRegReg,
    0x4c : MovRegReg,
    0x4d : MovRegReg,
    0x4e : MovRegMem,
    0x4f : MovRegReg,
    0x50 : MovRegReg,
    0x51 : MovRegReg,
    0x52 : MovRegReg,
    0x53 : MovRegReg,
    0x54 : MovRegReg,
    0x55 : MovRegReg,
    0x56 : MovRegMem,
    0x57 : MovRegReg,
    0x58 : MovRegReg,
    0x59 : MovRegReg,
    0x5a : MovRegReg,
    0x5b : MovRegReg,
    0x5c : MovRegReg,
    0x5d : MovRegReg,
    0x5e : MovRegMem,
    0x5f : MovRegReg,
    0x60 : MovRegReg,
    0x61 : MovRegReg,
    0x62 : MovRegReg,
    0x63 : MovRegReg,
    0x64 : MovRegReg,
    0x65 : MovRegReg,
    0x66 : MovRegMem,
    0x67 : MovRegReg,
    0x68 : MovRegReg,
    0x69 : MovRegReg,
    0x6a : MovRegReg,
    0x6b : MovRegReg,
    0x6c : MovRegReg,
    0x6d : MovRegReg,
    0x6e : MovRegMem,
    0x6f : MovRegReg,
    0x70 : MovMemReg,
    0x71 : MovMemReg,
    0x72 : MovMemReg,
    0x73 : MovMemReg,
    0x74 : MovMemReg,
    0x75 : MovMemReg,
    0x76 : HLT,
    0x77 : MovMemReg,
    0x78 : MovRegReg,
    0x79 : MovRegReg,
    0x7a : MovRegReg,
    0x7b : MovRegReg,
    0x7c : MovRegReg,
    0x7d : MovRegReg,
    0x7e : MovRegMem,
    0x7f : MovRegReg,
    0x80 : AddReg,
    0x81 : AddReg,
    0x82 : AddReg,
    0x83 : AddReg,
    0x84 : AddReg,
    0x85 : AddReg,
    0x86 : AddMem,
    0x87 : AddReg,
    0x88 : AddRegWithCarry,
    0x89 : AddRegWithCarry,
    0x8a : AddRegWithCarry,
    0x8b : AddRegWithCarry,
    0x8c : AddRegWithCarry,
    0x8d : AddRegWithCarry,
    0x8e : AddMemWithCarry,
    0x8f : AddRegWithCarry,
    0x90 : SubReg,
    0x91 : SubReg,
    0x92 : SubReg,
    0x93 : SubReg,
    0x94 : SubReg,
    0x95 : SubReg,
    0x96 : SubMem,
    0x97 : SubReg,
    0x98 : SubRegWithCarry,
    0x99 : SubRegWithCarry,
    0x9a : SubRegWithCarry,
    0x9b : SubRegWithCarry,
    0x9c : SubRegWithCarry,
    0x9d : SubRegWithCarry,
    0x9e : SubMemWithCarry,
    0x9f : SubRegWithCarry,
    0xa0 : AndAccumulatorReg,
    0xa1 : AndAccumulatorReg,
    0xa2 : AndAccumulatorReg,
    0xa3 : AndAccumulatorReg,
    0xa4 : AndAccumulatorReg,
    0xa5 : AndAccumulatorReg,
    0xa6 : AndAccumulatorMem,
    0xa7 : AndAccumulatorReg,
    0xa8 : XorAccumulatorReg,
    0xa9 : XorAccumulatorReg,
    0xaa : XorAccumulatorReg,
    0xab : XorAccumulatorReg,
    0xac : XorAccumulatorReg,
    0xad : XorAccumulatorReg,
    0xae : XorAccumulatorMem,
    0xaf : XorAccumulatorReg,
    0xb0 : OrAccumulatorReg,
    0xb1 : OrAccumulatorReg,
    0xb2 : OrAccumulatorReg,
    0xb3 : OrAccumulatorReg,
    0xb4 : OrAccumulatorReg,
    0xb5 : OrAccumulatorReg,
    0xb6 : OrAccumulatorMem,
    0xb7 : OrAccumulatorReg,
    0xb8 : CompareReg,
    0xb9 : CompareReg,
    0xba : CompareReg,
    0xbb : CompareReg,
    0xbc : CompareReg,
    0xbd : CompareReg,
    0xbe : CompareMem,
    0xbf : CompareReg,
    0xc0 : ReturnNotZero,
    0xc1 : PopReg,
    0xc2 : JumpNotZero,
    0xc3 : UnconditionalJump,
    0xc4 : CallNotZero,
    0xc5 : PushReg,
    0xc6 : AddImm,
    0xc7 : Reset,
    0xc8 : ReturnZero,
    0xc9 : UnconditionalReturn,
    0xca : JumpZero,
    0xcc : CallZero,
    0xcd : UnconditionalCall,
    0xce : AddDataWithCarry,
    0xcf : Reset,
    0xd0 : ReturnNotCarry,
    0xd1 : PopReg,
    0xd2 : JumpNotCarry,
    0xd3 : OUT,
    0xd4 : CallNotCarry,
    0xd5 : PushReg,
    0xd6 : SubImm,
    0xd7 : Reset,
    0xd8 : ReturnCarry,
    0xda : JumpCarry,
    0xdb : IN,
    0xdc : CallCarry,
    0xde : SubImmWithCarry,
    0xdf : Reset,
    0xe0 : ReturnParityOdd,
    0xe1 : PopReg,
    0xe2 : JumpParityOdd,
    0xe3 : MovToHL,
    0xe4 : CallParityOdd,
    0xe5 : PushReg,
    0xe6 : AndAccumulatorImm,
    0xe7 : Reset,
    0xe8 : ReturnParityEven,
    0xe9 : HLToPC,
    0xea : JumpParityEven,
    0xeb : Exchange,
    0xec : CallParityEven,
    0xee : XorAccumulatorImm,
    0xef : Reset,
    0xf0 : ReturnPositive,
    0xf1 : PopAFlags,
    0xf2 : JumpPositive,
    0xf3 : DI,
    0xf4 : CallPositive,
    0xf5 : PushAFlags,
    0xf6 : OrAccumulatorImm,
    0xf7 : Reset,
    0xf8 : ReturnMinus,
    0xf9 : HlToSP,
    0xfa : JumpMinus,
    0xfb : EI,
    0xfc : CallMinus,
    0xfe : CompareImm,
    0xff : Reset,
    0xfd : NOP,
    0xed : NOP,
    0x08 : NOP,
    0x10 : NOP,
    0xdd : NOP,
    0xd9 : NOP,
    0xcb : NOP,
    0x38 : NOP,
    0x30 : NOP,
    0x28 : NOP,
    0x18 : NOP,
}

def disas(data):
    inst_class = optdict[data[0]]
    inst = inst_class()

    return inst.getTokens(), inst.getWidth()

